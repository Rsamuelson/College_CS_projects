// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Standard Edition"

// DATE "10/04/2016 12:31:18"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module primeDetector (
	w,
	x,
	y,
	z,
	f);
input 	w;
input 	x;
input 	y;
input 	z;
output 	f;

// Design Ports Information
// f	=>  Location: PIN_G21,	 I/O Standard: 2.5 V,	 Current Strength: Default
// z	=>  Location: PIN_AB28,	 I/O Standard: 2.5 V,	 Current Strength: Default
// y	=>  Location: PIN_AC28,	 I/O Standard: 2.5 V,	 Current Strength: Default
// x	=>  Location: PIN_AC27,	 I/O Standard: 2.5 V,	 Current Strength: Default
// w	=>  Location: PIN_AD27,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("primeDetector_v.sdo");
// synopsys translate_on

wire \f~output_o ;
wire \w~input_o ;
wire \x~input_o ;
wire \y~input_o ;
wire \z~input_o ;
wire \f~0_combout ;


// Location: IOOBUF_X74_Y73_N23
cycloneive_io_obuf \f~output (
	.i(\f~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\f~output_o ),
	.obar());
// synopsys translate_off
defparam \f~output .bus_hold = "false";
defparam \f~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X115_Y13_N8
cycloneive_io_ibuf \w~input (
	.i(w),
	.ibar(gnd),
	.o(\w~input_o ));
// synopsys translate_off
defparam \w~input .bus_hold = "false";
defparam \w~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y15_N8
cycloneive_io_ibuf \x~input (
	.i(x),
	.ibar(gnd),
	.o(\x~input_o ));
// synopsys translate_off
defparam \x~input .bus_hold = "false";
defparam \x~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y14_N1
cycloneive_io_ibuf \y~input (
	.i(y),
	.ibar(gnd),
	.o(\y~input_o ));
// synopsys translate_off
defparam \y~input .bus_hold = "false";
defparam \y~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y17_N1
cycloneive_io_ibuf \z~input (
	.i(z),
	.ibar(gnd),
	.o(\z~input_o ));
// synopsys translate_off
defparam \z~input .bus_hold = "false";
defparam \z~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X114_Y17_N8
cycloneive_lcell_comb \f~0 (
// Equation(s):
// \f~0_combout  = (\w~input_o  & (\z~input_o  & (\x~input_o  $ (\y~input_o )))) # (!\w~input_o  & ((\x~input_o  & ((\z~input_o ))) # (!\x~input_o  & (\y~input_o ))))

	.dataa(\w~input_o ),
	.datab(\x~input_o ),
	.datac(\y~input_o ),
	.datad(\z~input_o ),
	.cin(gnd),
	.combout(\f~0_combout ),
	.cout());
// synopsys translate_off
defparam \f~0 .lut_mask = 16'h7C10;
defparam \f~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign f = \f~output_o ;

endmodule
